# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    redis.socket_path: '%env(REDIS_SOCKET)%'
    redis.database: '%env(int:REDIS_DB)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            # - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    cache.app:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        arguments:
            - 'app.cache'
    
    # Configuration Redis avec socket Unix
    redis.connection:
        class: Redis
        calls:
            - connect: ['%redis.socket_path%']
            - select: ['%redis.database%']
            - setOption: [!php/const Redis::OPT_SERIALIZER, !php/const Redis::SERIALIZER_JSON]
            - setOption: [!php/const Redis::OPT_COMPRESSION, !php/const Redis::COMPRESSION_LZ4]
            - setOption: [!php/const Redis::OPT_TCP_KEEPALIVE, 1]

    # Service de cache maintenance
    App\Service\MaintenanceCacheService:
        arguments:
            $redis: '@redis.connection'
            $logger: '@logger'
        tags:
            - { name: 'monolog.logger', channel: 'maintenance_cache' }

    # Alias pour compatibilité
    maintenance.cache:
        alias: App\Service\MaintenanceCacheService
        public: true

    # Interface pour l'injection de dépendance
    Redis:
        alias: redis.connection
        public: true
